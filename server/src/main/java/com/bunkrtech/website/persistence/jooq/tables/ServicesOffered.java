/*
 * This file is generated by jOOQ.
*/
package com.bunkrtech.website.persistence.jooq.tables;


import com.bunkrtech.website.persistence.jooq.Keys;
import com.bunkrtech.website.persistence.jooq.Public;
import com.bunkrtech.website.persistence.jooq.tables.records.ServicesOfferedRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServicesOffered extends TableImpl<ServicesOfferedRecord> {

    private static final long serialVersionUID = 1367912034;

    /**
     * The reference instance of <code>public.services_offered</code>
     */
    public static final ServicesOffered SERVICES_OFFERED = new ServicesOffered();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServicesOfferedRecord> getRecordType() {
        return ServicesOfferedRecord.class;
    }

    /**
     * The column <code>public.services_offered.id</code>.
     */
    public final TableField<ServicesOfferedRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('services_offered_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.services_offered.name</code>.
     */
    public final TableField<ServicesOfferedRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.services_offered.description</code>.
     */
    public final TableField<ServicesOfferedRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1000).nullable(false), this, "");

    /**
     * Create a <code>public.services_offered</code> table reference
     */
    public ServicesOffered() {
        this("services_offered", null);
    }

    /**
     * Create an aliased <code>public.services_offered</code> table reference
     */
    public ServicesOffered(String alias) {
        this(alias, SERVICES_OFFERED);
    }

    private ServicesOffered(String alias, Table<ServicesOfferedRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServicesOffered(String alias, Table<ServicesOfferedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ServicesOfferedRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SERVICES_OFFERED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServicesOfferedRecord> getPrimaryKey() {
        return Keys.SERVICES_OFFERED_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServicesOfferedRecord>> getKeys() {
        return Arrays.<UniqueKey<ServicesOfferedRecord>>asList(Keys.SERVICES_OFFERED_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServicesOffered as(String alias) {
        return new ServicesOffered(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServicesOffered rename(String name) {
        return new ServicesOffered(name, null);
    }
}
